# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
  - name: deploymentmode
    displayName: "Deployment Mode"
    type: string
    default: "Plan only"
    values:
      - "Deploy full"
      - "Plan only"

  - name: useBackupAgent
    displayName: "Use backuppool agent"
    type: boolean
    default: "true" # Change to boolean value



name: Provision_rg - ${{ parameters.deploymentMode }}


pr: none
trigger: none

pool: 
  vmImage: ubuntu-latest

variables:
- template: config/global.config.yml

stages:
- stage: deploy_resources
  displayName: 'Deploy Resources'
  jobs:
  - deployment: BuildAgentsforResources
    displayName: 'Deploy Resource'
    environment: $(environment)
    continueOnError: "false" # Change to boolean value
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            inputs:
              terraformVersion: '0.12.31'
              displayName: "Install Terraform"
 
          - task: AzureCLI@2
            displayName: "Terraform init"
            inputs:
              addSpnToEnvironment: true
              azureSubscription: $(SVC_CONNECTION)
              failOnStandardError: true
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |
                az account set --subscription $(subscription)
                TERRAFORM_BACKEND_SUBSCRIPTION_ID=$(az account show --subscription $(SUBSCRIPTION) --query id --output tsv)
                subId=$(az account show --subscription $(SUBSCRIPTION) --query id --output tsv)
                ACCOUNT_KEY=$(az storage account keys list --resource-group $(TF_BACKEND_RESOURCE_GROUP_NAME) --account-name $(TF_BACKEND_STORAGE_NAME) --query '[0].value' -o tsv)

                export ARM_ACCESS_KEY=$ACCOUNT_KEY
                export ARM_CLIENT_ID=$servicePrincipalId
                export ARM_CLIENT_SECRET=$servicePrincipalKey
                export ARM_Subscription_ID=$subId
                export ARM_TENANT_ID=$(TENANT_ID)

                ls
                cd ./modules/deploy_rg
                terraform init \
                  -reconfigure \
                  -backend-config="key=$(TF_STATE_NAME).tfstate" \
                  -backend-config="resource_group_name=$(TF_BACKEND_RESOURCE_GROUP_NAME)" \
                  -backend-config="storage_account_name=$(TF_BACKEND_STORAGE_NAME)" \
                  -backend-config="subscription_id=$TERRAFORM_BACKEND_SUBSCRIPTION_ID" \
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER_NAME)"

          - task: AzureCLI@2
            displayName: "Terraform Validate"
            inputs:
              addSpnToEnvironment: true
              azureSubscription: $(SVC_CONNECTION)
              failOnStandardError: false
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |
                cd ./modules/deploy_rg
                terraform validate

          - task: AzureCLI@2
            displayName: "Terraform plan"
            inputs:
              addSpnToEnvironment: true
              azureSubscription: $(SVC_CONNECTION)
              failOnStandardError: true
              scriptLocation: inlineScript
              scriptType: pscore
              inlineScript: |
                az login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $(azuresubscription)
                $TERRAFORM_BACKEND_SUBSCRIPTION_ID = $(az account show --query id --output tsv)
                $subId= $(az account show --query id --output tsv)
                $ACCOUNT_KEY= $(az storage account keys list --query '[0].value' -o tsv)

                $env:ARM_ACCESS_KEY = $ACCOUNT_KEY
                $env:ARM_CLIENT_ID = $AZURE_CLIENT_ID
                $env:ARM_CLIENT_SECRET = $AZURE_CLIENT_SECRET
                $env:ARM_Subscription_ID = $subId
                $env:ARM_TENANT_ID = $AZURE_TENANT_ID

                
                cd ./modules/deploy_rg
                terraform init `
                  -backend-config="key=$(TF_STATE_NAME).tfstate" `
                  -backend-config="resource_group_name=$(TF_BACKEND_RESOURCE_GROUP_NAME)" `
                  -backend-config="storage_account_name=$(TF_BACKEND_STORAGE_NAME)" `
                  -backend-config="subscription_id=$TERRAFORM_BACKEND_SUBSCRIPTION_ID" `
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER_NAME)"

                 terraform plan `
                   -input=false `
                   -var-file=./config/global.config.yml


          - task: AzureCLI@2
            displayName: "Terraform apply"
            inputs:
              addSpnToEnvironment: true
              azureSubscription: $(SVC_CONNECTION)
              failOnStandardError: true
              scriptLocation: inlineScript
              scriptType: pscore
              inlineScript: |
                az account set --subscription $(azuresubscription)
                TERRAFORM_BACKEND_SUBSCRIPTION_ID=$(az account show --subscription $(SUBSCRIPTION) --query id --output tsv)
                subId=$(az account show --subscription $(SUBSCRIPTION) --query id --output tsv)
                ACCOUNT_KEY=$(az storage account keys list --resource-group $(TF_BACKEND_RESOURCE_GROUP_NAME) --account-name $(TF_BACKEND_STORAGE_NAME) --query '[0].value' -o tsv)

                export ARM_ACCESS_KEY=$ACCOUNT_KEY
                export ARM_CLIENT_ID=$servicePrincipalId
                export ARM_CLIENT_SECRET=$servicePrincipalKey
                export ARM_Subscription_ID=$subId
                export ARM_TENANT_ID=$(TENANT_ID)

                cd ./modules/deploy_rg
                terraform apply tfplan

